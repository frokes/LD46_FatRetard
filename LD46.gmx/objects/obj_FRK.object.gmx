<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_FRK</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Friendly</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object variables
event_inherited();

MaxSpd = 30;
MaxAcc = 300;
turnAcc = 3;
turnSpd = 500;

raylength = 1000;
raymin = 45;
raydensity = 15;

HP = 3;
invurnTime = 90;
PanicDistance = 700;
state = "follow";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Helper variables

target = -999;
food = -999;

acc = MaxAcc;
spd = MaxSpd;
alarm[3] = 30;

path = path_add();

isPlayer = false;

powerup = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End game
surface_reset_target();
show_message("Game Over!");
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>powerup = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Raycast
if(state == "panic" || state == "panic start") { exit;}
if(!instance_exists(food)) { food = -999; state = "follow";}
var hit = -999;
for ( j = 0; j &lt; 360; j += raydensity)
{
    for (i = raymin; i &lt; raylength; i += 10)
    {
        ray_x = self.x + lengthdir_x(i,j)
        ray_y = self.y + lengthdir_y(i,j)
        if(!position_empty(ray_x, ray_y))
        { 
            if (food &lt; 0)
            {
                hit = collision_line(self.x,self.y,ray_x,ray_y,obj_Food,false,true);
            }
            else if (sqrt(food.x^^2 + food.y^^2) &gt; sqrt(ray_x^^2 + ray_y^^2))
            {
                hit = collision_line(self.x,self.y,ray_x,ray_y,obj_Food,false,true);
            }
            if (hit &gt; 0 ) { food = hit; state = "food"; target = food; audio_play_sound_at(snd_alert,x,y,0,100,500,1,false,1)}
            break;
        }
    }    
}
alarm[3] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check state and move accordningly</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch on state
var dist, flag_x, flag_y, Enemy, EnemyDistance,counter;
if(!instance_exists(target)){target = obj_Player}
//if(target = obj_Player){ state = "follow"; }

switch(state)
{
    case "follow":
        target = obj_Player;
        dist = 150;
    break;
    case "panic start":
        
        flag_x = random_range(0, room_width/global.NavRes)*global.NavRes;
        flag_y = random_range(0, room_height/global.NavRes)*global.NavRes;
        counter = 0;
        while(!mp_grid_path(global.NavMesh, path, x, y, flag_x, flag_y, true))
        {
            flag_x = random_range(0, room_width/global.NavRes)*global.NavRes;
            flag_y = random_range(0, room_height/global.NavRes)*global.NavRes;
            counter++;
        }
        target = instance_create(flag_x, flag_y, obj_Flag);
        dist = 0;
        state = "panic";
    break;
    case "panic":
        if(instance_exists(obj_Enemy))
        {
            Enemy = instance_nearest(x,y,obj_Enemy);
            EnemyDistance = point_distance(x,y,Enemy.x,Enemy.y);
        }
        else
        {
            EnemyDistance = 9999999;
        }
        if( point_distance(x,y,target.x,target.y) &lt; 100 &amp;&amp; target != obj_Player)
        {
            with(target)
            {
                instance_destroy();
            }
            if (EnemyDistance &lt; PanicDistance)
            {
                state = "panic start";
                exit;
            }
            else
            {
                target = obj_Player;
                state = "follow";
            }
        }
        dist = 0;
    break;
    case "food":
        dist = 0;
    break;
}

var point_x, point_y;

if(mp_grid_path(global.NavMesh, path, x, y, target.x, target.y, true))
{
    point_x = path_get_point_x(path,1);
    point_y = path_get_point_y(path,1);
    if(point_distance(target.x,target.y,x,y) &gt; dist)
    {
        moveTarget_x = point_x;
        moveTarget_y = point_y;
    }
    else if (point_distance(target.x,target.y,x,y) &lt; dist/2 )
    {
        moveTarget_x = x + lengthdir_x(dist,point_direction(target.x, target.y, x, y));
        moveTarget_y = y + lengthdir_y(dist,point_direction(target.x, target.y, x, y));
    }
    else
    {
        moveTarget_x = x;
        moveTarget_y = y;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide speed from state and powerup
/*
var spd_1, spd_2;
spd_1 = 1;
spd_2 = 1;
spd_3 = 1;

if (state == "panic") { spd_1 = 3; } 
if (powerup == 2) { spd_2 = 2; }
if (slowed) { spd_3 = 0.5; }
spd = MaxSpd * spd_1 * spd_2 * spd_3;
acc = MaxAcc * spd_1 * spd_2 * spd_3;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn fires if poweredup
if(powerup == 1)
{   
    if(state != "panic")
    {
        state = "panic start";
    }
    nearestFire = instance_nearest(x,y,obj_Fire);
    
    if(nearestFire != noone)
    {
        if(distance_to_point(nearestFire.x, nearestFire.y) &gt; 16)
        {
            instance_create(x,y,obj_Fire);
        }
    }
    else
    {
        instance_create(x,y,obj_Fire);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn sparks if lightning powerup
if(powerup == 2)
{   
    if(state != "panic")
    {
        state = "panic start";
        partsys = part_system_create();
        part_system_depth(partsys,-1);
    
        sparks = part_type_create();
        part_type_shape(sparks,pt_shape_spark);
        part_type_colour_hsv(sparks,130,140,100,200,235,255);
        part_type_orientation(sparks,0,360,random_range(-5,5),0.5,true);
        part_type_size(sparks,0.2,0.5,-0.01,0.01);
        part_type_speed(sparks,15,20,-0.5,0.1);
        part_type_direction(sparks,0, 360,0,1);
        part_type_life(sparks,3,6);
        part_type_gravity(sparks,5,270);
            
        part_particles_create(partsys,x,y,sparks,15*4);
    }
    partsys = part_system_create();
    part_system_depth(partsys,-1);
    
    sparks = part_type_create();
    part_type_shape(sparks,pt_shape_spark);
    part_type_colour_hsv(sparks,130,140,100,200,235,255);
    part_type_orientation(sparks,0,360,random_range(-5,5),5,true);
    part_type_size(sparks,0.1,0.2,-0.01,0.5);
    part_type_speed(sparks,5,25,-0.5,0.5);
    part_type_direction(sparks,0, 360,0,25);
    part_type_life(sparks,3,7);
    part_type_gravity(sparks,5,270);
            
    part_particles_create(partsys,x,y,sparks,5*4);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call inherited events

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Fire">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Don't die from this
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take dmg and panic
if(!invurn)
{
    HP--;
    invurn = true;
    alarm[1] = 30;
}
if(state != "panic")
{
    state = "panic start";
}
else
{
    with(target)
    {
        instance_destroy();
    }
    state = "panic start";
}
with(other)
{
    stun = true;
    alarm[0] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.200000002980232</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.00999999977648258</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,44</point>
    <point>24,32</point>
  </PhysicsShapePoints>
</object>
